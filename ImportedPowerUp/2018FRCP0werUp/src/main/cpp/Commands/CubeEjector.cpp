// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CubeEjector.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

CubeEjector::CubeEjector(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::aircontrolModule.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void CubeEjector::Initialize()
{
}

// Called repeatedly when this Command is scheduled to run
void CubeEjector::Execute()
{
	// Cube kicker
	if (RobotMap::aircontrolModuleCubeKicker->Get() == DoubleSolenoid::kReverse)
	{
		// user released right bumper and reversed the solenoid
		RobotMap::aircontrolModuleCubeKicker->Set(DoubleSolenoid::kOff);
	}
	else if (Robot::controllerState1->GetRightBumper())
	{
		// driver pressed right bumper and solenoid is off
		RobotMap::aircontrolModuleCubeKicker->Set(DoubleSolenoid::kForward);
	}
	else
	{
		// this should be the 'normal' code path - no bumper pressed, solenoid off
		if (RobotMap::aircontrolModuleCubeKicker->Get() == DoubleSolenoid::kForward)
		{
			// driver release right bumper and solenoid is on
			RobotMap::aircontrolModuleCubeKicker->Set(DoubleSolenoid::kReverse);
		}
	}
}

// Make this return true when this Command no longer needs to run execute()
bool CubeEjector::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void CubeEjector::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void CubeEjector::Interrupted() {

}
