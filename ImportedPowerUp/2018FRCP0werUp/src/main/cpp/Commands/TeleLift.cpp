// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "TeleLift.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

TeleLift::TeleLift(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::scissorLift.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void TeleLift::Initialize()
{

}

// Called repeatedly when this Command is scheduled to run
void TeleLift::Execute()
{
	// when switches are tripped, Get() returns false!
	bool atHome = RobotMap::scissorLiftDigitalInput0->Get();
	bool fullyExtended = RobotMap::scissorLiftDigitalInput1->Get();

	double rightY = Robot::controllerState2->GetRightY();
	double motorSpeed = fabs(rightY);
	char numStr[80] = "";

	if (atHome)
	{
		sprintf(numStr, "At Home");
	}
	else
	{
		sprintf(numStr, "Not At Home");
	}

	SmartDashboard::PutString("DB/String 8", numStr);

	if (fullyExtended)
	{
		sprintf(numStr, "Extended");
	}
	else
	{
		sprintf(numStr, "Not Extended");
	}

	SmartDashboard::PutString("DB/String 9", numStr);

	if (rightY > 0.2 && !fullyExtended)
	{
		// lift the scissor lift
		RobotMap::scissorLiftScissorLiftMotor->Set(motorSpeed);
		printf("current=%4.3f voltage = %4.3f\n", RobotMap::scissorLiftScissorLiftMotor->GetOutputCurrent(),
				RobotMap::scissorLiftScissorLiftMotor->GetMotorOutputVoltage());
	}
	else if (rightY < -0.2 && !atHome)
	{
		// lower the scissor lift
		RobotMap::scissorLiftScissorLiftMotor->Set(-motorSpeed);
		printf("current=%4.3f voltage = %4.3f\n", RobotMap::scissorLiftScissorLiftMotor->GetOutputCurrent(),
			RobotMap::scissorLiftScissorLiftMotor->GetMotorOutputVoltage());
	}
	else
	{
		RobotMap::scissorLiftScissorLiftMotor->Set(0.0);
	}

}

// Make this return true when this Command no longer needs to run execute()
bool TeleLift::IsFinished()
{
	return false;//(RobotMap::scissorLiftScissorLiftMotor->GetOutputCurrent() > 500.0);
}

// Called once after isFinished returns true
void TeleLift::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void TeleLift::Interrupted() {

}
