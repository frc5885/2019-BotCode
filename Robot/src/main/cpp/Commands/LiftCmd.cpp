// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/LiftCmd.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

LiftCmd::LiftCmd(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::liftSubSystem.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

int printCount = 0;

// Called just before this Command runs the first time
void LiftCmd::Initialize()
{
    // initialize our local accessors
    controllerState = Robot::controllerState2.get();
    liftSubSystem = Robot::liftSubSystem.get();
    liftSubSystem->ZeroSensors();
    printf("New Lift command initialized\n");
}

// Called repeatedly when this Command is scheduled to run
void LiftCmd::Execute()
{
    if (this->controllerState->m_controller.GetRawButton(BUMPER_LEFT))
    {
        // set closed loop mode for talons 5 & 7 (level lifting of robot)
        this->ClosedLoopExecute();
    }
    else
    { 
        // set open loop mode for talons 5 & 7 (front & rear lift are separate)
        //this->OpenLoopExecute();
    }
}

// Make this return true when this Command no longer needs to run execute()
bool LiftCmd::IsFinished()
{
    return false;
}

// Called once after isFinished returns true
void LiftCmd::End()
{
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LiftCmd::Interrupted()
{
}

////// user defined methods ///////

void  LiftCmd::OpenLoopExecute()
{
    // put the drive subsystem into open-loop mode
    Robot::liftIsInClosedLoop = false;

    // set the motor speed
    float motorSpeed = controllerState->GetLeftY();

    if (this->controllerState->GetLeftTrig() > 0.4)
    { 
        // Full speed motor for back racks when raising and holding left shoulder button
        this->liftSubSystem->SetMotorSpeed(motorSpeed);
    }
    else
    { 
        // 40% speed the rest of the time for balancing with weaker front lift
        this->liftSubSystem->SetMotorSpeed(0.37 * motorSpeed);
    }
}

void LiftCmd::ClosedLoopExecute()
{
    this->liftSubSystem->SetLeftJoystickY(this->controllerState->GetLeftY());
    Robot::liftIsInClosedLoop = true;
}