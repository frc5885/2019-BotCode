// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/PneumaticsCmd.h"
#include "ControllerState.h"
#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

PneumaticsCmd::PneumaticsCmd(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::hatchSubSystem.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void PneumaticsCmd::Initialize()
{
    printf("----Pneumatics command-----\n");
    this->controllerState = Robot::controllerState1.get();
}

// Called repeatedly when this Command is scheduled to run
void PneumaticsCmd::Execute() 
{
	if (Robot::hatchMode == HatchEjectMode::EjectingHatch)
	{
		Robot::hatchSubSystem->EjectorForward();
		Robot::hatchMode = HatchEjectMode::PortInRange;
	}

    // actuate gripper for the hatch
    if (this->controllerState->GetLeftTrig() > 0.4)
    {
        Robot::hatchSubSystem->ExtendGripper();
    }
    else
    {
        Robot::hatchSubSystem->RetractGripper();
    }

    // actuate pins to eject the hatch
	if (Robot::hatchSubSystem->GetEjectorState() == frc::DoubleSolenoid::kReverse)
	{
		// user released right bumper and reversed the solenoid
		Robot::hatchSubSystem->EjectorOff();
	}
	else if (controllerState->GetRightBumper())
	{
		// driver pressed right bumper and solenoid is off
		Robot::hatchSubSystem->EjectorForward();
	}
	else if (Robot::hatchSubSystem->GetEjectorState() == frc::DoubleSolenoid::kForward)
	{
		// driver release right bumper and solenoid is on
		Robot::hatchSubSystem->EjectorReverse();
	}

	// pivot command
   	if (this->controllerState->GetLeftBumper())
   	{
       	Robot::hatchSubSystem->PivotForward();
   	}
   	else
   	{
       	Robot::hatchSubSystem->PivotReverse();
   	}
}

// Make this return true when this Command no longer needs to run execute()
bool PneumaticsCmd::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void PneumaticsCmd::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void PneumaticsCmd::Interrupted() {

}
