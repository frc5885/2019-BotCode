// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/DriveSubSystem.h"
#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveSubSystem::DriveSubSystem() : frc::PIDSubsystem("DriveSubSystem", .04, 0.0, 0.0) 
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftFront.reset(new WPI_TalonSRX(4));
    leftRear.reset(new WPI_TalonSRX(3));
    rightFront.reset(new WPI_TalonSRX(2));
    rightRear.reset(new WPI_TalonSRX(1));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
 
    this->leftSpeed = 0.0;
    this->rightSpeed = 0.0;

    this->SetAbsoluteTolerance(0.2);

    printf("Drive sub-system initialized\n");
}

void DriveSubSystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DriveSubSystem::Periodic() 
{
    // if we are manually driving the robot...
    if (Robot::hatchMode == HatchEjectMode::PortNotInRange || 
        Robot::hatchMode == HatchEjectMode::PortInRange)
    {
        // drive the wheels based on the joysticks - tank drive mode
        this->leftFront->Set(ControlMode::PercentOutput, this->leftSpeed);
        this->rightFront->Set(ControlMode::PercentOutput, this->rightSpeed);
        this->leftRear->Set(ControlMode::PercentOutput, this->leftSpeed);
        this->rightRear->Set(ControlMode::PercentOutput, this->rightSpeed);
    }
    else if (Robot::hatchMode == HatchEjectMode::AligningWithPort)
    {
        // slave the right front and rear wheels to the left front, which
        // is being controlled via a PID controller using the camera as input
        this->rightFront->Set(ControlMode::Follower, 4);
        this->leftRear->Set(ControlMode::Follower, 4);
        this->rightRear->Set(ControlMode::Follower, 4);
    }
}

double DriveSubSystem::ReturnPIDInput()
{
    return Robot::visionNetworkTable->GetNumber("tx", 0.0);
}

void DriveSubSystem::UsePIDOutput(double output)
{
    this->leftFront->PIDWrite(output);
}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

