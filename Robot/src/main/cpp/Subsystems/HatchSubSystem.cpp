// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/HatchSubSystem.h"
#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

HatchSubSystem::HatchSubSystem() : frc::Subsystem("HatchSubSystem")
 {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    compressor1.reset(new frc::Compressor(11));
    ejectorpins.reset(new frc::DoubleSolenoid(8, 0, 1));
    gripper.reset(new frc::DoubleSolenoid(9, 2, 3));
    hatchSwing.reset(new frc::DoubleSolenoid(10, 4, 5));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    this->controllerState = Robot::controllerState1.get();
}

void HatchSubSystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND 

        //SetDefaultCommand(new Hatch());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void HatchSubSystem::Periodic()
{
    if (controllerState->GetButtonA())
    {
        this->hatchSwing->Set(frc::DoubleSolenoid::kForward);
    }
    else
    {
        this->hatchSwing->Set(frc::DoubleSolenoid::kReverse);
    }

    if (controllerState->GetRightBumper())
    {
        this->ejectorpins->Set(frc::DoubleSolenoid::kReverse);
    }
    else
    {
        this->ejectorpins->Set(frc::DoubleSolenoid::kForward);
    }

    if (controllerState->m_controller.GetRawButton(BUTTON_B))
    {
        this->gripper->Set(frc::DoubleSolenoid::kForward);
    }
    else
    {
        this->gripper->Set(frc::DoubleSolenoid::kReverse);
    }
    
    
}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.
