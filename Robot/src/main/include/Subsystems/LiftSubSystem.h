// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef LIFTSUBSYSTEM_H
#define LIFTSUBSYSTEM_H
#include "frc/commands/Subsystem.h"
#include "frc/WPILib.h"
#include "ctre/Phoenix.h"

enum Constants 
{
	/**
	 * Which PID slot to pull gains from.  Starting 2018, you can choose
	 * from 0,1,2 or 3.  Only the first two (0,1) are visible in web-based configuration.
	 */
	kSlotIdx = 0,

	/* Talon SRX/ Victor SPX will supported multiple (cascaded) PID loops.
	 * For now we just want the primary one.
	 */
	kPIDLoopIdx = 0,

	/*
	 * set to zero to skip waiting for confirmation, set to nonzero to wait
	 * and report to DS if action fails.
	 */
	kTimeoutMs = 30
};

/**
 *
 *
 * @author ExampleAuthor
 */
class LiftSubSystem: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> liftMotor5;
	std::shared_ptr<WPI_TalonSRX> liftMotor6;
	std::shared_ptr<WPI_TalonSRX> liftMotor7;
	std::shared_ptr<frc::SpeedControllerGroup> liftDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public:
	LiftSubSystem();
	void InitDefaultCommand() override;
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS


// Properties
private:
    double motorSpeed;      // speed for lift motors
    double leftJoystickY;   // left joystick Y position for closed loop control
    bool logOutput;         // log closed loop output
    std::string logStr;     // string for logged output
    int logStrLoops;        // loop countr for logged strings
    int logStrDelay;        // delay in output for logged strings

// Methods
public:
    void ZeroSensors();

    void SetMotorSpeed(const double& speed)
    {
        if (speed >= -1.0 && speed <= 1.0)
        {
            this->motorSpeed = speed;
        }
    }

    void SetLeftJoystickY(const double& yValue)
    {
        this->leftJoystickY = yValue;
    }

private:
    void RunClosedLoop();
};

#endif
