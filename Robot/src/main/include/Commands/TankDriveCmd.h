// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef TANK_DRIVE_CMD_H
#define TANK_DRIVE_CMD_H


#include "frc/commands/Subsystem.h"
#include "Robot.h"

#include "ControllerState.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class TankDriveCmd: public frc::Command {
public:
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	TankDriveCmd();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

	void Initialize() override;
	void Execute() override;
	bool IsFinished() override;
	void End() override;
	void Interrupted() override;

private:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES
// Constants
	// Maximum speed for aligning robot with target while driving forward
	const double maxAutoAlignSpeed = .4;

	// Gain Value for aligning robot with target while driving forward  
	const double autoAlignGain = 60.0;
	const double parallelGain = 1.3;

	// Auto alignment angle tolerance
	const double angleTolerance = .3;

// Properties
public:
	static bool autoAlignParallel;

private:
    DriveSubSystem* driveSubSystem;
    ControllerState* controllerState;
	double motorSpeedScale;	// 0 = motors won't run, 1 = full blast
	bool autoAlignPerpendicular;

	// Camera vars
	double tx, tv, ta, ts;

// Methods
public:
	void SetSpeedScale(double scaleFactor)
	{
		// limit from 0 - 1
		scaleFactor = (scaleFactor < 0.0) ? 0.0 : scaleFactor;
		scaleFactor = (scaleFactor > 1.0) ? 1.0 : scaleFactor;
		this->motorSpeedScale = scaleFactor;
	}
	
private:
    double SmoothDriveCurve(double joystickYPosition) const;
	void AutoAlignPerpendicularFromLimelight();
	void AutoAlignParallelFromLimelight();
};

#endif
