// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/MoveToPosition.h"

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

///MoveToPosition::MoveToPosition(): frc::PIDCommand("MoveToPosition", .04, 0.0, 0.0, 0.02) 
MoveToPosition::MoveToPosition(): frc::Command() 
{
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	///Requires(Robot::positionController.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // GetPIDController()->SetContinuous(false);    done n PositionController constructor
        // GetPIDController()->SetAbsoluteTolerance(0.2);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    printf("MoveToPosition Constructor\n");
    m_setPoint = -1.0;
}

// double MoveToPosition::ReturnPIDInput()
// {
//     // Return your input value for the PID loop
//     // e.g. a sensor, like a potentiometer:
//     // yourPot.getAverageVoltage() / kYourMaxVoltage;

//         // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
//         return Robot::positionController->GetEncoder()->PIDGet();

//     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
// }

// void MoveToPosition::UsePIDOutput(double output)
// {
//     // Use output to drive your system, like a motor
//     // e.g. yourMotor.set(output);

//         // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
//     Robot::positionController->GetTalonSRX6()->PIDWrite(output);

//     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
//}

// Called just before this Command runs the first time
void MoveToPosition::Initialize() 
{
    printf("MoveToPosition::Initialize\n");
    Robot::positionController->SetSetpointRelative(0.0);
    Robot::positionController->Enable();              // starts PID controller
}

// Called repeatedly when this Command is scheduled to run
void MoveToPosition::Execute() 
{
//    printf("MoveToPosition::Execute\n");

    if (Robot::positionController->OnTarget())
    {
        Robot::positionController->SetSetpointRelative(0.0);
        printf("On target\n");
    }

    if (Robot::controllerState->GetButtonA() && m_setPoint < 0.0)
    {
        // set initial setpoint to tx angle from limelight
        Robot::controllerState->ForceButtonState(BUTTON_A, false);
    	std::shared_ptr<NetworkTable> table = nt::NetworkTableInstance::GetDefault().GetTable("limelight");
	    Robot::positionController->SetSetpointRelative(table->GetNumber("tx",0.0));
    }

    // slave other 3 motors to the motor with the encoder
    Robot::positionController->GetTalonSRX5()->Set(ControlMode::Follower, 6);
    Robot::positionController->GetTalonSRX7()->Set(ControlMode::Follower, 6);
    Robot::positionController->GetTalonSRX8()->Set(ControlMode::Follower, 6);
}

// Make this return true when this Command no longer needs to run execute()
bool MoveToPosition::IsFinished()
{
    if (Robot::controllerState->GetButtonA())
        return Robot::positionController->OnTarget();
    else
        return false;
}

// Called once after isFinished returns true

void MoveToPosition::End()
{
    Robot::positionController->Disable();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void MoveToPosition::Interrupted() {
}
