// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

#include <frc/Commands/Scheduler.h>
#include <frc/SmartDashboard/SmartDashboard.h>
#include "networktables/NetworkTable.h"
#include "networktables/NetworkTableInstance.h"

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<PositionController> Robot::positionController;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

std::unique_ptr<ControllerState> Robot::controllerState;
std::shared_ptr<NetworkTable> Robot::visionNetworkTable;

void Robot::RobotInit()
{
	Robot::visionNetworkTable = nt::NetworkTableInstance::GetDefault().GetTable("limelight");

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    positionController.reset(new PositionController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());
	controllerState.reset(new ControllerState(0));

	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


	chooser.SetDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	frc::SmartDashboard::PutData("Auto Modes", &chooser);
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit()
{
	Robot::visionNetworkTable->PutNumber("camMode",0);
///	Robot::visionNetworkTable->PutNumber("ledMode",(double)LL_LEDS_OFF);
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomousCommand = chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() 
{
	Robot::visionNetworkTable->PutNumber("ledMode",LL_LEDS_ON);

	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();

	pidMoveCommand = new MoveToPosition();
	pidMoveCommand->Start();
}

void Robot::TeleopPeriodic() 
{
	controllerState->GetState();
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TestInit()
{
	///Robot::visionNetworkTable->PutNumber("camMode",1.0);
	Robot::visionNetworkTable->PutNumber("ledMode",LL_LEDS_OFF);
}

void Robot::TestPeriodic()
{
	double targetOffsetAngle_Horizontal = Robot::visionNetworkTable->GetNumber("tx",0.0);
	double targetOffsetAngle_Vertical = Robot::visionNetworkTable->GetNumber("ty",0.0);
	double targetArea = Robot::visionNetworkTable->GetNumber("ta",0.0);
	double targetSkew = Robot::visionNetworkTable->GetNumber("ts",0.0);
	double targetValid = Robot::visionNetworkTable->GetNumber("tv", 0.0);

	printf("valid = %4.3f horiz ang = %4.3f, vert ang = %4.3f, area = %4.3f skew = %4.3f\n",
	targetValid, targetOffsetAngle_Horizontal, targetOffsetAngle_Vertical, targetArea, targetSkew);
}

#ifndef RUNNING_FRC_TESTS
int main(int argc, char** argv) {
    return frc::StartRobot<Robot>();
}
#endif
