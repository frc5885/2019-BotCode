// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Subsystems/PositionController.h"
#include "frc/SmartDashboard/SmartDashboard.h"
#include "frc/LiveWindow/LiveWindow.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
PositionController::PositionController() : PIDSubsystem("PositionController", .04, 0.0, 0.0)
{
    SetAbsoluteTolerance(0.2);
    GetPIDController()->SetContinuous(false);
    GetPIDController()->SetName("Position Contoller", "PIDSubsystem Controller");
    //frc::LiveWindow::GetInstance()->Add(GetPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    encoder.reset(new frc::Encoder(2, 3, false, frc::Encoder::k4X));
    talonSRX6.reset(new WPI_TalonSRX(6));
    talonSRX5.reset(new WPI_TalonSRX(5));
    talonSRX7.reset(new WPI_TalonSRX(7));
    talonSRX8.reset(new WPI_TalonSRX(8));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // SRX6 is the master - with the encoder
    // SRX5,7,8 are slaves that move using the commands from SRX6
    
    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.
    encoder->SetDistancePerPulse(0.012);
    encoder->SetPIDSourceType(frc::PIDSourceType::kDisplacement);

    // moved to MoveToPosition::Initialize()
    ///this->SetSetpoint(10.0);    // target distance = 10"
    ///this->Enable();
    printf("PositionController Constructor\n");
}

double PositionController::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    return encoder->PIDGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}

void PositionController::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    talonSRX6->PIDWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void PositionController::InitDefaultCommand() 
{
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


      // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
}

std::shared_ptr<frc::PIDSource> PositionController::GetEncoder()
{
    return encoder;
}

// master controller hooked up to encoder
std::shared_ptr<frc::PIDOutput> PositionController::GetTalonSRX6()
{
    return talonSRX6;
}

// slave controllers
std::shared_ptr<WPI_TalonSRX> PositionController::GetTalonSRX5()
{
    return talonSRX5;
}

std::shared_ptr<WPI_TalonSRX> PositionController::GetTalonSRX7()
{
    return talonSRX7;
}

std::shared_ptr<WPI_TalonSRX> PositionController::GetTalonSRX8()
{
    return talonSRX8;
}
